TARGETS := net

CC := gcc
# You can add -Werr to GCC to force all warnings to turn into errors
CFLAGS := -g -Wall -std=c99
LDFLAGS := -lm

HEADERS := \
	net.h

# Blank line ends list.

# If you add a new file called "filename.c", you should
# add "filename.o \" to this list.
OBJS := 

NET_OBJS:= \
	net.o

# Blank line ends list.

OLDMODE := $(shell cat .buildmode 2> /dev/null)
ifeq ($(DEBUG),1)
CFLAGS := -DDEBUG -O0 -pg -p $(CFLAGS)
LDFLAGS := -DDEBUG -O0 -pg -p $(LDFLAGS)
ifneq ($(OLDMODE),debug)
$(shell echo debug > .buildmode)
endif
else
CFLAGS := -DNDEBUG -O3 $(CFLAGS)
ifneq ($(OLDMODE),nodebug)
$(shell echo nodebug > .buildmode)
endif
endif

# make all targets specified
all: $(TARGETS)

.PHONY: pintool
pintool:
	$(MAKE) -C pintool

net: $(OBJS) $(NET_OBJS)
	$(CC) $(OBJS) $(NET_OBJS) -o $@ $(LDFLAGS)


# compile objects

# pattern rule for building objects
%.o: %.c %.h $(HEADERS) .buildmode Makefile
	$(CC) $(CFLAGS) -c $< -o $@


# run each of the targets
run: $(TARGETS)
	for X in $(TARGETS) ; do \
		echo $$X -v ; \
		./$$X -v ; \
		echo ; \
	done

# remove targets and .o files as well as output generated by CQ
clean:
	$(RM) $(TARGETS) $(OBJS) $(NET_OBJS) *.std* .buildmode
	$(RM) tmp/*.out
