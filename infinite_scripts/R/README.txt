These scripts together (inefficiently) show how the results of a linear regression on past stock data would have done if they had been used in day trading over the past 1200 trading days.

The starting file is 'daychange.csv'. This is a slightly modified output file of 'sql_to_csv.py' on the server. The only change is that I've added a header line. The data is the change from open to adjusted close each day.
The file is ingested into 'Create_CSV.py'. This file takes whatever columns you want and however many days back you'd like to train on and formats it into a training file 'output.csv'. It also prints the column names in the format you need for 'MultiReg.R'. Just replace the whole line that it looks like.
'output.csv' is then used by 'MultiReg.R'. This file predicts 1 day ahead however many times you want and uses a linear regression on however many past days as you'd like. Make sure to replace the line that starts with 'fit <- ' with the Python shell output from 'Create_CSV.py'.
'MultiReg.R' outputs 'Multi.csv'. Copy the column of outputs from this into the corresponding column in 'Multi3.csv', delete the end of the columns until they're the same length, and save the file as 'Multi2.csv'.
Now you are able to run 'ProfitDailyChangeDayTrade.py' which will use the predicted data to make decisions as if it was happening live.

PARAMETERS

daychange.csv
	Doesn't really have parameters, but you can add columns such as sentiment to use that for predictions.
Create_CSV.py
	daysBack - Uses this many past days as inputs to the linear regression
	includedStocks - Only uses these stocks in the linear regression
MultiReg.R
	trainNum - How many past days the linear regression uses to train
	count - Total days back you want to make predictions on
	fit - Must replace this line each time you change includedStocks or daysBack in Create_CSV.py
ProfitDailyChangeDayTrade.py
	cash - Starting investment
	stock - Starting stock
	brokerFee - Broker fee
	minDiff - Threshold a prediction must break to be actionable (e.g. prediction an increase greater than minDiff or a decrease less than -minDiff)

FYI
'Multi3.csv' has four columns: USO, x, Open, and Close.
	USO is the actual day change, pulled from daychange.csv.
	x is the copied-in predicted day change.
	Open is the opening value that day, pulled in from 'open.csv' (which is generated by 'sql_to_csv.py')
	Close is the closing value that day, pulled in from 'something.csv' (which is generated by 'sql_to_csv.py')