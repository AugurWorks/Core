package server;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import twitter4j.FilterQuery;
import twitter4j.StallWarning;
import twitter4j.Status;
import twitter4j.StatusDeletionNotice;
import twitter4j.StatusListener;
import twitter4j.TwitterStream;
import twitter4j.TwitterStreamFactory;
import twitter4j.auth.OAuthAuthorization;
import twitter4j.conf.ConfigurationBuilder;

// Requires:
// Twitter4j library
// The Apache HttpClient library simplifies handling HTTP requests. 
// To use this library download the binaries with dependencies from 
// http://hc.apache.org/ and add then to your project class path.
public class TwitterReader implements Runnable {
	private static final String ACCESS_TOKEN = "1135747976-OyBreDVCujPbbfPLLUnV19kJ21qVTwvyxbKMnyn";
	private static final String ACCESS_TOKEN_SECRET = "yWa2a6HOCdWRd5K7Svb6KXb9G7MCd65xIUvDT8rCYo";
	private static final String CONSUMER_KEY = "iLQm2VraHR2MLe2mwS2mvg";
	private static final String CONSUMER_SECRET = "BNx6ij82BtzMVoEEvk6Y4xBDRjdAV8arWysSU7YmGA";
	private final FileWriter fw;
	private final BufferedWriter bw;
	private final File f;
	private final DateFormat dateFormat = new SimpleDateFormat(
			"yyyy/MM/dd HH:mm:ss");
	private final Calendar cal = Calendar.getInstance();

	private static final int MAX_STATUSES = 100;
	private String filename;

	public TwitterReader(String filename) throws IOException {
		this.filename = filename;
		this.f = new File(this.filename);
		if (!f.exists()) {
			f.createNewFile();
		}
		this.fw = new FileWriter(f.getAbsoluteFile());
		this.bw = new BufferedWriter(fw);
	}

	@Override
	public void run() {
		printHeader();
		System.out.println("Starting connect...");
		System.out.println("File output to: " + this.filename);

		ConfigurationBuilder builder = new ConfigurationBuilder();
		builder.setOAuthAccessToken(ACCESS_TOKEN);
		builder.setOAuthAccessTokenSecret(ACCESS_TOKEN_SECRET);
		builder.setOAuthConsumerKey(CONSUMER_KEY);
		builder.setOAuthConsumerSecret(CONSUMER_SECRET);

		// sample() method internally creates a thread which manipulates
		// TwitterStream and calls these adequate listener methods
		// continuously.
		OAuthAuthorization auth = new OAuthAuthorization(builder.build());
		final TwitterStream twitterStream = new TwitterStreamFactory()
				.getInstance(auth);

		StatusListener listener = new StatusListener() {
			private int statuses_counted = 0;

			@Override
			public void onStatus(Status status) {
				printItem(status);
				statuses_counted++;
				if (statuses_counted >= MAX_STATUSES) {
					twitterStream.cleanUp();
					quit();
				}
			}

			@Override
			public void onDeletionNotice(
					StatusDeletionNotice statusDeletionNotice) {
			}

			@Override
			public void onTrackLimitationNotice(int numberOfLimitedStatuses) {
			}

			@Override
			public void onException(Exception ex) {
				ex.printStackTrace();
			}

			@Override
			public void onScrubGeo(long arg0, long arg1) {
			}

			@Override
			public void onStallWarning(StallWarning arg0) {
			}
		};

		twitterStream.addListener(listener);

		FilterQuery query = new FilterQuery();
		String track[] = { "opec", "big data", "bieber" };
		query.track(track);
		// twitterStream.sample();
		twitterStream.filter(query);

	}

	private void quit() {
		printFooter();
		try {
			bw.flush();
			bw.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		Thread.currentThread().interrupt();
	}

	private void printHeader() {
		String buildDate = dateFormat.format(cal.getTime());
		String s = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?> \n"
				+ "<rss version=\"2.0\"> \n" + "<channel>\n"
				+ "<title>Twitter?</title> \n"
				+ "<description>AugurWorks First Guess</description>\n"
				+ "<link></link> \n" + "<lastBuildDate>" + buildDate
				+ "</lastBuildDate> \n" + "<pubDate>" + buildDate
				+ "</pubDate> \n" + "<ttl>1800</ttl> \n";
	}

	private void printItem(Status status) {
try {
	
} catch (Exception e) {e.printStackTrace();}
	}

	private void printFooter() {
		try {
			String s = "</channel>\n</rss>";
			bw.write(s);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}